# because we do not need to copy the shape of Item
# we import by using the below comment
# import * from './generated/prisma.graphql'

# anytime you add something to your schema that is a mutation or query
# you must create the corresponding resolver

type SuccessMessage {
  message: String
}

type Mutation {
  createItem(
    title: String
    description: String
    price: Int
    image: String
    largeImage: String
  ): Item!
  updateItem(id: ID!, title: String, description: String, price: Int): Item!
  deleteItem(id: ID!): Item
  # User comes from our imported graphql
  signup(email: String!, password: String!, name: String!): User!
  signin(email: String!, password: String!): User!
  # doesnt really need to return anything
  # we will return a custom type that isnt tied to backend
  # we just want a success message that something happened
  signout: SuccessMessage
  requestReset(email: String!): SuccessMessage
  resetPassword(
    resetToken: String!
    password: String!
    confirmPassword: String!
  ): User!
  updatePermissions(permissions: [Permission], userId: ID!): User
  addToCart(id: ID!): CartItem
  removeFromCart(id: ID!): CartItem
  createOrder(token: String!): Order!
}

type Query {
  items(
    where: ItemWhereInput
    orderBy: ItemOrderByInput
    skip: Int
    first: Int
  ): [Item]!
  item(where: ItemWhereUniqueInput!): Item
  itemsConnection(where: ItemWhereUniqueInput): ItemConnection!
  me: User
  users: [User]!
  order(id: ID!): Order
  orders(orderBy: OrderOrderByInput): [Order]!
}

# we want to redefine User in our schema/ yoga server
# to not return resetToken, avoiding anyone from resetting the token on the front end
# we remove implements node because that concept does not exist in yoga
# permissions needs to be defined else it will pull it from the generated
type User {
  id: ID!
  name: String!
  email: String!
  permissions: [Permission]
  cart: [CartItem!]!
}
